{"version":3,"sources":["index.js"],"names":["Container","useEffect","container","camera","scene","renderer","controller","reticle","raycaster","mouse","hitTestSource","hitTestSourceRequested","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","render","timestamp","frame","referenceSpace","xr","getReferenceSpace","session","getSession","requestReferenceSpace","then","requestHitTestSource","space","source","addEventListener","hitTestResults","getHitTestResults","length","hit","visible","matrix","fromArray","getPose","transform","document","querySelector","THREE","light","position","set","add","antialias","alpha","setPixelRatio","devicePixelRatio","enabled","appendChild","domElement","console","log","body","event","x","clientX","y","clientY","planeMesh","side","rotation","Math","PI","ARButton","createButton","requiredFeatures","geometry","translate","getController","material","color","random","mesh","setFromCamera","intersects","intersectObjects","children","point","rotateX","matrixAutoUpdate","init","setAnimationLoop","className","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.8c898e54.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as THREE from           'three';\nimport { RGBELoader } from       'three/examples/jsm/loaders/RGBELoader.js';\nimport { ARButton } from         'three/examples/jsm/webxr/ARButton.js';\nimport { XREstimatedLight } from 'three/examples/jsm/webxr/XREstimatedLight';\n\nfunction Container() {\n\n    // Three.js functionality is all inside useEffect on comp mount\n    useEffect(() => {\n\n        // define variables\n        let container;\n        let camera, scene, renderer;\n        let controller;\n        let reticle;\n        let raycaster;\n        let mouse;\n\n        // set hit test\n        let hitTestSource = null;\n        let hitTestSourceRequested = false;\n\n        init();\n        animate();\n\n        function init() {\n            // get container for the canvas\n            container = document.querySelector( '.scene' );\n\n            // set Scene\n            scene = new THREE.Scene();\n\n            // set Camera\n            camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 20 );\n\n            // set Light and add to the Scene\n            const light = new THREE.HemisphereLight( 0xffffff, 0xbbbbff, 1 );\n            light.position.set( 0.5, 1, 0.25 );\n            scene.add( light );\n\n            // set renderer \n            renderer = new THREE.WebGLRenderer( { antialias: true, alpha: true } );\n            renderer.setPixelRatio( window.devicePixelRatio );\n            renderer.setSize( window.innerWidth, window.innerHeight );\n            // enable XR and use container\n            renderer.xr.enabled = true;\n            container.appendChild( renderer.domElement );\n\n\n\n            // cast a ray\n            raycaster = new THREE.Raycaster()\n            console.log('camera.position', camera.position)\n            const rayOrigin = camera.position\n            // const rayDirection = new THREE.Vector3(0, 0, -10)\n            // rayDirection.normalize()\n            // raycaster.set(rayOrigin, rayDirection)\n\n            mouse = new THREE.Vector2()\n\n            const onTouch = ( event ) => {\n                // calculate mouse position in normalized device coordinates\n\t            // (-1 to +1) for both components\n\n\t            mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n\t            mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n                console.log(mouse.x, mouse.y)\n            }\n\n            document.body.addEventListener('click', onTouch)\n\n\n\n            // TEST ground planeMesh\n            const planeMesh = new THREE.Mesh( new THREE.PlaneBufferGeometry(10, 10, 1, 1), new THREE.MeshStandardMaterial({\n                side: THREE.DoubleSide,\n            }))\n            planeMesh.rotation.x = Math.PI / 2\n            planeMesh.position.set(0, -1, -2)\n            scene.add(planeMesh)\n\n            // add AR button and require hit-test\n            document.body.appendChild( ARButton.createButton( renderer, { requiredFeatures: [ 'hit-test' ] } ) );\n\n            // cylinder\n            const geometry = new THREE.CylinderGeometry( 0.1, 0.1, 0.2, 32 ).translate( 0, 0.1, 0 );\n\n            // on user select add cylinder to the reticle position\n            function onSelect() {\n                const material = new THREE.MeshPhongMaterial( { color: 0xffffff * Math.random() } );\n                const mesh = new THREE.Mesh( geometry, material );\n\n                raycaster.setFromCamera( mouse, camera )\n                const intersects = raycaster.intersectObjects( scene.children, false );\n                console.log(intersects)\n                \n                mesh.position.set(intersects[0].point)\n                scene.add( mesh );\n            }\n\n            // get Controller (touch screen)\n            controller = renderer.xr.getController( 0 );\n            controller.addEventListener( 'select', onSelect );\n            scene.add( controller );\n\n            // create Reticle\n            reticle = new THREE.Mesh(\n                new THREE.RingGeometry( 0.15, 0.2, 32 ).rotateX( - Math.PI / 2 ),\n                new THREE.MeshBasicMaterial()\n            );\n            reticle.matrixAutoUpdate = false;\n            reticle.visible = false;\n            scene.add( reticle );\n            \n            // set resize handler\n            window.addEventListener( 'resize', onWindowResize );\n        }\n\n        // resize handler\n        function onWindowResize() {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n\n            renderer.setSize( window.innerWidth, window.innerHeight );\n        }\n\n        // Animations\n        function animate() {\n            renderer.setAnimationLoop( render );\n        }\n\n        // Render\n        function render( timestamp, frame ) {\n            if ( frame ) {\n                // get reference space of device\n                const referenceSpace = renderer.xr.getReferenceSpace();\n\n                // get session object\n                const session = renderer.xr.getSession();\n \n                if ( hitTestSourceRequested === false ) {\n                    // get the Viewer ref space\n                    session.requestReferenceSpace( 'viewer' ).then( function ( referenceSpace ) {\n                        // then use it to get hitTestSource\n                        session.requestHitTestSource( { space: referenceSpace } ).then( function ( source ) {\n                            hitTestSource = source;\n                        } );\n\n                    } );\n\n                    // on Session end remove hit test\n                    session.addEventListener( 'end', function () {\n                        hitTestSourceRequested = false;\n                        hitTestSource = null;\n                    } );\n\n                    hitTestSourceRequested = true;\n                }\n\n                if ( hitTestSource ) {\n\n                    // get hit test results\n                    const hitTestResults = frame.getHitTestResults( hitTestSource );\n\n                    if ( hitTestResults.length ) {\n                        // get first result\n                        const hit = hitTestResults[ 0 ];\n                        // show and place reticle\n                        reticle.visible = true;\n                        reticle.matrix.fromArray( hit.getPose( referenceSpace ).transform.matrix );\n\n                    } else {\n                        reticle.visible = false;\n                    }\n\n                }\n\n            }\n\n            renderer.render( scene, camera );\n\n        }\n\n    }, [])\n\n\n\n    return (\n        <>\n            <div className=\"scene\" />\n        </>\n    )\n    \n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Container />, rootElement);"],"sourceRoot":""}