{"version":3,"sources":["index.js"],"names":["style","height","console","log","App","this","init","animate","window","addEventListener","handleWindowResize","removeEventListener","cancelAnimationFrame","requestID","container","document","createElement","body","appendChild","scene","THREE","camera","innerWidth","innerHeight","light","position","set","add","renderer","antialias","alpha","setPixelRatio","devicePixelRatio","setSize","xr","enabled","domElement","ARButton","createButton","geometry","rotateX","Math","PI","controller","getController","material","color","random","mesh","applyMatrix4","matrixWorld","quaternion","setFromRotationMatrix","onWindowResize","aspect","updateProjectionMatrix","setAnimationLoop","render","ref","mount","Component","Container","state","isMounted","onClick","setState","React","rootElement","getElementById","ReactDOM"],"mappings":"4PAMMA,EAAQ,CACVC,OAAQ,KAEZC,QAAQC,IAAI,S,IAENC,E,kLAEEC,KAAKC,OACLD,KAAKE,UACLC,OAAOC,iBAAiB,SAAUJ,KAAKK,sB,6CAIvCF,OAAOG,oBAAoB,SAAUN,KAAKK,oBAC1CF,OAAOI,qBAAqBP,KAAKQ,a,6BAK7B,IAAD,OAEGC,EAAYC,SAASC,cAAe,OAC1CD,SAASE,KAAKC,YAAaJ,GAE3BT,KAAKc,MAAQ,IAAIC,IAEjBf,KAAKgB,OAAS,IAAID,IAAyB,GAAIZ,OAAOc,WAAad,OAAOe,YAAa,IAAM,IAE7F,IAAMC,EAAQ,IAAIJ,IAAuB,SAAU,SAAU,GAC7DI,EAAMC,SAASC,IAAK,GAAK,EAAG,KAC5BrB,KAAKc,MAAMQ,IAAKH,GAIhBnB,KAAKuB,SAAW,IAAIR,IAAqB,CAAES,WAAW,EAAMC,OAAO,IACnEzB,KAAKuB,SAASG,cAAevB,OAAOwB,kBACpC3B,KAAKuB,SAASK,QAASzB,OAAOc,WAAYd,OAAOe,aACjDlB,KAAKuB,SAASM,GAAGC,SAAU,EAC3BrB,EAAUI,YAAab,KAAKuB,SAASQ,YAIrCrB,SAASE,KAAKC,YAAamB,IAASC,aAAcjC,KAAKuB,WAIvD,IAAMW,EAAW,IAAInB,IAAwB,EAAG,IAAM,GAAK,IAAKoB,QAASC,KAAKC,GAAK,GAYnFrC,KAAKsC,WAAatC,KAAKuB,SAASM,GAAGU,cAAe,GAClDvC,KAAKsC,WAAWlC,iBAAkB,UAXjB,WAEb,IAAMoC,EAAW,IAAIzB,IAAyB,CAAE0B,MAAO,SAAWL,KAAKM,WACjEC,EAAO,IAAI5B,IAAYmB,EAAUM,GACvCG,EAAKvB,SAASC,IAAK,EAAG,GAAK,IAAMuB,aAAc,EAAKN,WAAWO,aAC/DF,EAAKG,WAAWC,sBAAuB,EAAKT,WAAWO,aACvD,EAAK/B,MAAMQ,IAAKqB,MAMpB3C,KAAKc,MAAMQ,IAAKtB,KAAKsC,YAIrBnC,OAAOC,iBAAkB,SAAUJ,KAAKgD,kB,uCAMxChD,KAAKgB,OAAOiC,OAAS9C,OAAOc,WAAad,OAAOe,YAChDlB,KAAKgB,OAAOkC,yBAEZlD,KAAKuB,SAASK,QAASzB,OAAOc,WAAYd,OAAOe,e,gCAQjDlB,KAAKuB,SAAS4B,iBAAkBnD,KAAKoD,U,+BAMrCpD,KAAKuB,SAAS6B,OAAQpD,KAAKc,MAAOd,KAAKgB,U,+BAIjC,IAAD,OACL,OAAO,yBAAKrB,MAAOA,EAAO0D,IAAK,SAAAA,GAAG,OAAK,EAAKC,MAAQD,S,GAvF1CE,aA2FZC,E,4MACFC,MAAQ,CAACC,WAAW,G,uDAEV,IAAD,SACsB1D,KAAKyD,MAAzBC,iBADF,SAEL,OACI,oCACI,4BAAQC,QAAS,kBAAM,EAAKC,UAAS,SAAAH,GAAK,MAAK,CAACC,WAAYD,EAAMC,gBAC7DA,EAAY,UAAY,SAE5BA,GAAa,kBAAC3D,EAAD,MACb2D,GAAa,oE,GAXNG,IAAMN,WAiBxBO,EAAcpD,SAASqD,eAAe,QAC5CC,IAASZ,OAAO,kBAACI,EAAD,MAAeM,K","file":"static/js/main.5ff7d8dc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from 'three';\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport { ARButton } from 'three/examples/jsm/webxr/ARButton.js';\n\nconst style = {\n    height: 500 // we can control scene size by setting container dimensions\n};\nconsole.log('boomm')\n\nclass App extends Component {\n    componentDidMount() {\n        this.init()\n        this.animate()\n        window.addEventListener('resize', this.handleWindowResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleWindowResize);\n        window.cancelAnimationFrame(this.requestID);\n    }\n\n    // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n    // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n    init() {\n\n        const container = document.createElement( 'div' );\n        document.body.appendChild( container );\n\n        this.scene = new THREE.Scene();\n\n        this.camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 20 );\n\n        const light = new THREE.HemisphereLight( 0xffffff, 0xbbbbff, 1 );\n        light.position.set( 0.5, 1, 0.25 );\n        this.scene.add( light );\n\n        //\n\n        this.renderer = new THREE.WebGLRenderer( { antialias: true, alpha: true } );\n        this.renderer.setPixelRatio( window.devicePixelRatio );\n        this.renderer.setSize( window.innerWidth, window.innerHeight );\n        this.renderer.xr.enabled = true;\n        container.appendChild( this.renderer.domElement );\n\n        //\n\n        document.body.appendChild( ARButton.createButton( this.renderer ) );\n\n        //\n\n        const geometry = new THREE.CylinderGeometry( 0, 0.05, 0.2, 32 ).rotateX( Math.PI / 2 );\n\n        const onSelect = () => {\n\n            const material = new THREE.MeshPhongMaterial( { color: 0xffffff * Math.random() } );\n            const mesh = new THREE.Mesh( geometry, material );\n            mesh.position.set( 0, 0, - 0.3 ).applyMatrix4( this.controller.matrixWorld );\n            mesh.quaternion.setFromRotationMatrix( this.controller.matrixWorld );\n            this.scene.add( mesh );\n\n        }\n\n        this.controller = this.renderer.xr.getController( 0 );\n        this.controller.addEventListener( 'select', onSelect );\n        this.scene.add( this.controller );\n\n        //\n\n        window.addEventListener( 'resize', this.onWindowResize );\n\n    }\n\n    onWindowResize() {\n\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.setSize( window.innerWidth, window.innerHeight );\n\n    }\n\n    //\n\n    animate() {\n\n        this.renderer.setAnimationLoop( this.render );\n\n    }\n\n    render() {\n\n        this.renderer.render( this.scene, this.camera );\n\n    }\n\n    render() {\n        return <div style={style} ref={ref => (this.mount = ref)} />;\n    }\n}\n\nclass Container extends React.Component {\n    state = {isMounted: true};\n\n    render() {\n        const {isMounted = true} = this.state;\n        return (\n            <>\n                <button onClick={() => this.setState(state => ({isMounted: !state.isMounted}))}>\n                    {isMounted ? \"Unmount\" : \"Mount\"}\n                </button>\n                {isMounted && <App />}\n                {isMounted && <div>Scroll to zoom, drag to rotate</div>}\n            </>\n        )\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Container />, rootElement);"],"sourceRoot":""}