{"version":3,"sources":["index.js"],"names":["Container","useEffect","camera","scene","renderer","controller","defaultEnvironment","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","render","updateEnvironment","envMap","traverse","object","isMesh","material","container","document","createElement","body","appendChild","THREE","defaultLight","add","antialias","alpha","setPixelRatio","devicePixelRatio","outputEncoding","physicallyCorrectLights","xr","enabled","domElement","xrLight","XREstimatedLight","addEventListener","remove","environment","RGBELoader","setDataType","setPath","load","texture","mapping","ARButton","createButton","optionalFeatures","ballGeometry","ballGroup","position","z","i","j","ballMaterial","color","reflectivity","ballMesh","set","rows","cols","getController","applyMatrix4","matrixWorld","quaternion","setFromRotationMatrix","init","setAnimationLoop","className","console","log","rootElement","getElementById","ReactDOM"],"mappings":"+JAAA,4EASA,SAASA,IAyIL,OAtIAC,qBAAU,WAEN,IAAIC,EAAQC,EAAOC,EACfC,EACAC,EAwGJ,SAASC,IACLL,EAAOM,OAASC,OAAOC,WAAaD,OAAOE,YAC3CT,EAAOU,yBAEPR,EAASS,QAASJ,OAAOC,WAAYD,OAAOE,aAOhD,SAASG,IACLV,EAASU,OAAQX,EAAOD,GAI5B,SAASa,EAAmBC,GACxBb,EAAMc,UAAU,SAAWC,GAClBA,EAAOC,SAASD,EAAOE,SAASJ,OAASA,OArHtD,WAEI,IAAMK,EAAYC,SAASC,cAAe,OAC1CD,SAASE,KAAKC,YAAaJ,GAE3BlB,EAAQ,IAAIuB,IAEZxB,EAAS,IAAIwB,IAAyB,GAAIjB,OAAOC,WAAaD,OAAOE,YAAa,IAAM,IAExF,IAAMgB,EAAe,IAAID,IAAoB,UAC7CvB,EAAMyB,IAAKD,IAIXvB,EAAW,IAAIsB,IAAqB,CAAEG,WAAW,EAAMC,OAAO,KACrDC,cAAetB,OAAOuB,kBAC/B5B,EAASS,QAASJ,OAAOC,WAAYD,OAAOE,aAC5CP,EAAS6B,eAAiBP,IAC1BtB,EAAS8B,yBAA0B,EACnC9B,EAAS+B,GAAGC,SAAU,EACtBf,EAAUI,YAAarB,EAASiC,YAKhC,IAAMC,EAAU,IAAIC,IAAkBnC,GAEtCkC,EAAQE,iBAAkB,mBAAmB,WAGzCrC,EAAMyB,IAAKU,GACXnC,EAAMsC,OAAQd,GAGTW,EAAQI,aACT3B,EAAmBuB,EAAQI,gBAInCJ,EAAQE,iBAAkB,iBAAiB,WAGvCrC,EAAMyB,IAAKD,GACXxB,EAAMsC,OAAQH,GAGdvB,EAAmBT,OAMvB,IAAIqC,KACCC,YAAalB,KACbmB,QAAS,0BACTC,KAAM,0BAA0B,SAAWC,GAExCA,EAAQC,QAAUtB,IAElBX,EADAT,EAAqByC,MAK7BzB,SAASE,KAAKC,YAAawB,IAASC,aAAc9C,EAAU,CAAE+C,iBAAkB,CAAE,uBAElF,IAAMC,EAAe,IAAI1B,IAA4B,KAAO,GAAI,IAC1D2B,EAAY,IAAI3B,IACtB2B,EAAUC,SAASC,GAAM,EAKzB,IAHA,IAGUC,EAAI,EAAGA,EAHJ,EAGcA,IAEvB,IAAM,IAAIC,EAAI,EAAGA,EAJR,EAIkBA,IAAO,CAC9B,IAAMC,EAAe,IAAIhC,IAAyB,CAC9CiC,MAAO,SACPC,aAAcH,EAPb,IAUCI,EAAW,IAAInC,IAAY0B,EAAcM,GAC/CG,EAASP,SAASQ,IAAgC,IAAzBN,EAAI,GAAMO,IAA+C,IAAzBN,EAAI,GAAMO,GAAoB,GACvFX,EAAUzB,IAAKiC,GAGvB1D,EAAMyB,IAAKyB,IAOXhD,EAAaD,EAAS+B,GAAG8B,cAAe,IAC7BzB,iBAAkB,UAN7B,WACIa,EAAUC,SAASQ,IAAK,EAAG,GAAK,GAAII,aAAc7D,EAAW8D,aAC7Dd,EAAUe,WAAWC,sBAAuBhE,EAAW8D,gBAK3DhE,EAAMyB,IAAKvB,GAEXI,OAAO+B,iBAAkB,SAAUjC,GAnGvC+D,GA8GIlE,EAASmE,iBAAkBzD,KAchC,IAKC,oCACI,yBAAK0D,UAAU,WA7I3BC,QAAQC,IAAInC,KAmJZ,IAAMoC,EAAcrD,SAASsD,eAAe,QAC5CC,IAAS/D,OAAO,kBAACd,EAAD,MAAe2E,K","file":"static/js/main.b0575af1.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as THREE from           'three';\nimport { RGBELoader } from       'three/examples/jsm/loaders/RGBELoader.js';\nimport { ARButton } from         'three/examples/jsm/webxr/ARButton.js';\nimport { XREstimatedLight } from 'three/examples/jsm/webxr/XREstimatedLight';\nconsole.log(XREstimatedLight)\n\nfunction Container() {\n\n    // Three.js functionality is all inside useEffect on comp mount\n    useEffect(() => {\n        // define variables\n        let camera, scene, renderer;\n        let controller;\n        let defaultEnvironment;\n        \n        init();\n        animate();\n\n        function init() {\n\n            const container = document.createElement( 'div' );\n            document.body.appendChild( container );\n\n            scene = new THREE.Scene();\n\n            camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 20 );\n\n            const defaultLight = new THREE.AmbientLight( 0xffffff );\n            scene.add( defaultLight );\n\n            //\n\n            renderer = new THREE.WebGLRenderer( { antialias: true, alpha: true } );\n            renderer.setPixelRatio( window.devicePixelRatio );\n            renderer.setSize( window.innerWidth, window.innerHeight );\n            renderer.outputEncoding = THREE.sRGBEncoding;\n            renderer.physicallyCorrectLights = true;\n            renderer.xr.enabled = true;\n            container.appendChild( renderer.domElement );\n\n            // Don't add the XREstimatedLight to the scene initially.\n            // It doesn't have any estimated lighting values until an AR session starts.\n\n            const xrLight = new XREstimatedLight( renderer );\n\n            xrLight.addEventListener( 'estimationstart', () => {\n\n                // Swap the default light out for the estimated one one we start getting some estimated values.\n                scene.add( xrLight );\n                scene.remove( defaultLight );\n\n                // The estimated lighting also provides an environment cubemap, which we can apply here.\n                if ( xrLight.environment ) {\n                    updateEnvironment( xrLight.environment );\n                }\n            } );\n\n            xrLight.addEventListener( 'estimationend', () => {\n\n                // Swap the lights back when we stop receiving estimated values.\n                scene.add( defaultLight );\n                scene.remove( xrLight );\n\n                // Revert back to the default environment.\n                updateEnvironment( defaultEnvironment );\n\n            } );\n\n            \n\n            new RGBELoader()\n                .setDataType( THREE.UnsignedByteType )\n                .setPath( '%PUBLIC_URL%/textures/' )\n                .load( 'royal_esplanade_1k.hdr', function ( texture ) {\n\n                    texture.mapping = THREE.EquirectangularReflectionMapping;\n                    defaultEnvironment = texture;\n                    updateEnvironment( defaultEnvironment );\n                } );\n\n            // In order for lighting estimation to work, 'light-estimation' must be included as either an optional or required feature.\n            document.body.appendChild( ARButton.createButton( renderer, { optionalFeatures: [ 'light-estimation' ] } ) );\n\n            const ballGeometry = new THREE.SphereBufferGeometry( 0.175, 32, 32 );\n            const ballGroup = new THREE.Group();\n            ballGroup.position.z = - 2;\n\n            const rows = 1;\n            const cols = 4;\n\n            for ( let i = 0; i < rows; i ++ ) {\n\n                for ( let j = 0; j < cols; j ++ ) {\n                    const ballMaterial = new THREE.MeshPhongMaterial( {\n                        color: 0xdddddd,\n                        reflectivity: j / cols\n                    } );\n\n                    const ballMesh = new THREE.Mesh( ballGeometry, ballMaterial );\n                    ballMesh.position.set( ( i + 0.5 - rows * 0.5 ) * 0.4, ( j + 0.5 - cols * 0.5 ) * 0.4, 0 );\n                    ballGroup.add( ballMesh );\n                }\n            }\n            scene.add( ballGroup );\n\n            function onSelect() {\n                ballGroup.position.set( 0, 0, - 2 ).applyMatrix4( controller.matrixWorld );\n                ballGroup.quaternion.setFromRotationMatrix( controller.matrixWorld );\n            }\n\n            controller = renderer.xr.getController( 0 );\n            controller.addEventListener( 'select', onSelect );\n            scene.add( controller );\n\n            window.addEventListener( 'resize', onWindowResize );\n        }\n\n        function onWindowResize() {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n\n            renderer.setSize( window.innerWidth, window.innerHeight );\n        }\n\n        function animate() {\n            renderer.setAnimationLoop( render );\n        }\n\n        function render() {\n            renderer.render( scene, camera );\n        }\n\n        // apply environment map\n        function updateEnvironment( envMap ) {\n            scene.traverse( function ( object ) {\n                if ( object.isMesh ) object.material.envMap = envMap;\n            } );\n        }\n\n    }, [])\n\n\n\n    return (\n        <>\n            <div className=\"scene\" />\n        </>\n    )\n    \n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Container />, rootElement);"],"sourceRoot":""}