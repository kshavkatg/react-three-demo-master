{"version":3,"sources":["index.js"],"names":["Container","useEffect","container","camera","scene","renderer","controller","reticle","hitTestSource","hitTestSourceRequested","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","render","timestamp","frame","referenceSpace","xr","getReferenceSpace","session","getSession","requestReferenceSpace","then","requestHitTestSource","space","source","addEventListener","hitTestResults","getHitTestResults","length","hit","visible","matrix","fromArray","getPose","transform","document","createElement","body","appendChild","THREE","light","position","set","add","antialias","alpha","setPixelRatio","devicePixelRatio","enabled","domElement","planeMesh","rotation","x","Math","PI","ARButton","createButton","requiredFeatures","geometry","translate","getController","material","color","random","mesh","setFromMatrixPosition","scale","y","rotateX","matrixAutoUpdate","init","setAnimationLoop","className","rootElement","getElementById","ReactDOM"],"mappings":"+JAAA,0EAQA,SAASA,IA+JL,OA5JAC,qBAAU,WAEN,IAAIC,EACAC,EAAQC,EAAOC,EACfC,EAEAC,EAEAC,EAAgB,KAChBC,GAAyB,EAuE7B,SAASC,IAELP,EAAOQ,OAASC,OAAOC,WAAaD,OAAOE,YAC3CX,EAAOY,yBAEPV,EAASW,QAASJ,OAAOC,WAAYD,OAAOE,aAYhD,SAASG,EAAQC,EAAWC,GAExB,GAAKA,EAAQ,CAET,IAAMC,EAAiBf,EAASgB,GAAGC,oBAC7BC,EAAUlB,EAASgB,GAAGG,aAyB5B,IAvBgC,IAA3Bf,IAEDc,EAAQE,sBAAuB,UAAWC,MAAM,SAAWN,GAEvDG,EAAQI,qBAAsB,CAAEC,MAAOR,IAAmBM,MAAM,SAAWG,GAEvErB,EAAgBqB,QAMxBN,EAAQO,iBAAkB,OAAO,WAE7BrB,GAAyB,EACzBD,EAAgB,QAIpBC,GAAyB,GAIxBD,EAAgB,CAEjB,IAAMuB,EAAiBZ,EAAMa,kBAAmBxB,GAEhD,GAAKuB,EAAeE,OAAS,CAEzB,IAAMC,EAAMH,EAAgB,GAE5BxB,EAAQ4B,SAAU,EAClB5B,EAAQ6B,OAAOC,UAAWH,EAAII,QAASlB,GAAiBmB,UAAUH,aAIlE7B,EAAQ4B,SAAU,GAQ9B9B,EAASY,OAAQb,EAAOD,IAtI5B,WAEID,EAAYsC,SAASC,cAAe,OACpCD,SAASE,KAAKC,YAAazC,GAE3BE,EAAQ,IAAIwC,IAEZzC,EAAS,IAAIyC,IAAyB,GAAIhC,OAAOC,WAAaD,OAAOE,YAAa,IAAM,IAExF,IAAM+B,EAAQ,IAAID,IAAuB,SAAU,SAAU,GAC7DC,EAAMC,SAASC,IAAK,GAAK,EAAG,KAC5B3C,EAAM4C,IAAKH,IAIXxC,EAAW,IAAIuC,IAAqB,CAAEK,WAAW,EAAMC,OAAO,KACrDC,cAAevC,OAAOwC,kBAC/B/C,EAASW,QAASJ,OAAOC,WAAYD,OAAOE,aAC5CT,EAASgB,GAAGgC,SAAU,EACtBnD,EAAUyC,YAAatC,EAASiD,YAEhC,IAAMC,EAAY,IAAIX,IAAY,IAAIA,IAA0B,GAAI,GAAI,EAAG,GAAI,IAAIA,KACnFxC,EAAM4C,IAAIO,GACVA,EAAUC,SAASC,EAAIC,KAAKC,GAAK,EACjCJ,EAAUT,SAASC,IAAI,GAAI,GAAI,GAI/BP,SAASE,KAAKC,YAAaiB,IAASC,aAAcxD,EAAU,CAAEyD,iBAAkB,CAAE,eAIlF,IAAMC,EAAW,IAAInB,IAAwB,GAAK,GAAK,GAAK,IAAKoB,UAAW,EAAG,GAAK,IAgBpF1D,EAAaD,EAASgB,GAAG4C,cAAe,IAC7BnC,iBAAkB,UAf7B,WAEI,GAAKvB,EAAQ4B,QAAU,CAEnB,IAAM+B,EAAW,IAAItB,IAAyB,CAAEuB,MAAO,SAAWT,KAAKU,WACjEC,EAAO,IAAIzB,IAAYmB,EAAUG,GACvCG,EAAKvB,SAASwB,sBAAuB/D,EAAQ6B,QAC7CiC,EAAKE,MAAMC,EAAoB,EAAhBd,KAAKU,SAAe,EACnChE,EAAM4C,IAAKqB,OAQnBjE,EAAM4C,IAAK1C,IAEXC,EAAU,IAAIqC,IACV,IAAIA,IAAoB,IAAM,GAAK,IAAK6B,SAAWf,KAAKC,GAAK,GAC7D,IAAIf,MAEA8B,kBAAmB,EAC3BnE,EAAQ4B,SAAU,EAClB/B,EAAM4C,IAAKzC,GAIXK,OAAOkB,iBAAkB,SAAUpB,GAjEvCiE,GAkFItE,EAASuE,iBAAkB3D,KA2DhC,IAKC,oCACI,yBAAK4D,UAAU,WAM3B,IAAMC,EAActC,SAASuC,eAAe,QAC5CC,IAAS/D,OAAO,kBAACjB,EAAD,MAAe8E,K","file":"static/js/main.54de32f8.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as THREE from           'three';\nimport { RGBELoader } from       'three/examples/jsm/loaders/RGBELoader.js';\nimport { ARButton } from         'three/examples/jsm/webxr/ARButton.js';\nimport { XREstimatedLight } from 'three/examples/jsm/webxr/XREstimatedLight';\n\nfunction Container() {\n\n    // Three.js functionality is all inside useEffect on comp mount\n    useEffect(() => {\n        // define variables\n        let container;\n        let camera, scene, renderer;\n        let controller;\n\n        let reticle;\n\n        let hitTestSource = null;\n        let hitTestSourceRequested = false;\n\n        init();\n        animate();\n\n        function init() {\n\n            container = document.createElement( 'div' );\n            document.body.appendChild( container );\n\n            scene = new THREE.Scene();\n\n            camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 20 );\n\n            const light = new THREE.HemisphereLight( 0xffffff, 0xbbbbff, 1 );\n            light.position.set( 0.5, 1, 0.25 );\n            scene.add( light );\n\n            //\n\n            renderer = new THREE.WebGLRenderer( { antialias: true, alpha: true } );\n            renderer.setPixelRatio( window.devicePixelRatio );\n            renderer.setSize( window.innerWidth, window.innerHeight );\n            renderer.xr.enabled = true;\n            container.appendChild( renderer.domElement );\n\n            const planeMesh = new THREE.Mesh( new THREE.PlaneBufferGeometry(10, 10, 1, 1), new THREE.MeshStandardMaterial())\n            scene.add(planeMesh)\n            planeMesh.rotation.x = Math.PI / 2\n            planeMesh.position.set(0, -1, -2)\n\n            //\n\n            document.body.appendChild( ARButton.createButton( renderer, { requiredFeatures: [ 'hit-test' ] } ) );\n\n            //\n\n            const geometry = new THREE.CylinderGeometry( 0.1, 0.1, 0.2, 32 ).translate( 0, 0.1, 0 );\n\n            function onSelect() {\n\n                if ( reticle.visible ) {\n\n                    const material = new THREE.MeshPhongMaterial( { color: 0xffffff * Math.random() } );\n                    const mesh = new THREE.Mesh( geometry, material );\n                    mesh.position.setFromMatrixPosition( reticle.matrix );\n                    mesh.scale.y = Math.random() * 2 + 1;\n                    scene.add( mesh );\n\n                }\n\n            }\n\n            controller = renderer.xr.getController( 0 );\n            controller.addEventListener( 'select', onSelect );\n            scene.add( controller );\n\n            reticle = new THREE.Mesh(\n                new THREE.RingGeometry( 0.15, 0.2, 32 ).rotateX( - Math.PI / 2 ),\n                new THREE.MeshBasicMaterial()\n            );\n            reticle.matrixAutoUpdate = false;\n            reticle.visible = false;\n            scene.add( reticle );\n\n            //\n\n            window.addEventListener( 'resize', onWindowResize );\n\n        }\n\n        function onWindowResize() {\n\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n\n            renderer.setSize( window.innerWidth, window.innerHeight );\n\n        }\n\n        //\n\n        function animate() {\n\n            renderer.setAnimationLoop( render );\n\n        }\n\n        function render( timestamp, frame ) {\n\n            if ( frame ) {\n\n                const referenceSpace = renderer.xr.getReferenceSpace();\n                const session = renderer.xr.getSession();\n\n                if ( hitTestSourceRequested === false ) {\n\n                    session.requestReferenceSpace( 'viewer' ).then( function ( referenceSpace ) {\n\n                        session.requestHitTestSource( { space: referenceSpace } ).then( function ( source ) {\n\n                            hitTestSource = source;\n\n                        } );\n\n                    } );\n\n                    session.addEventListener( 'end', function () {\n\n                        hitTestSourceRequested = false;\n                        hitTestSource = null;\n\n                    } );\n\n                    hitTestSourceRequested = true;\n\n                }\n\n                if ( hitTestSource ) {\n\n                    const hitTestResults = frame.getHitTestResults( hitTestSource );\n\n                    if ( hitTestResults.length ) {\n\n                        const hit = hitTestResults[ 0 ];\n\n                        reticle.visible = true;\n                        reticle.matrix.fromArray( hit.getPose( referenceSpace ).transform.matrix );\n\n                    } else {\n\n                        reticle.visible = false;\n\n                    }\n\n                }\n\n            }\n\n            renderer.render( scene, camera );\n\n        }\n\n    }, [])\n\n\n\n    return (\n        <>\n            <div className=\"scene\" />\n        </>\n    )\n    \n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Container />, rootElement);"],"sourceRoot":""}