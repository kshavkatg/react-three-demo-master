{"version":3,"sources":["libs/ControllerGestures.js","components/StartView.jsx","components/ReplaceButton.jsx","components/RecordButton.jsx","index.js","libs/ARButton.js"],"names":["ControllerGestures","THREE","constructor","renderer","super","undefined","console","error","clock","this","controller1","xr","getController","userData","gestures","index","selectPressed","addEventListener","onSelectStart","onSelectEnd","controller2","doubleClickLimit","pressMinimum","right","up","type","touchCount","self","data","startPosition","startTime","getElapsedTime","indexOf","taps","log","endTime","startToEnd","direction","position","y","dispatchEvent","matrixWorld","result","update","data1","data2","currentTime","elapsedTime","clone","touch","multiTouch","startDistance","distanceTo","delta","Math","abs","scale","initialise","v1","sub","normalize","v2","theta","angleTo","startVector","dist","velocity","v","x","z","currentDistance","cross","dot","StartView","onStartClick","className","src","alt","ReplaceButton","RecordButton","useEffect","document","getElementById","querySelector","recordButton","stream","recorder","mixedStream","audio","chunks","handleDataAvailable","e","push","handleStop","blob","Blob","recordedVideo","URL","createObjectURL","load","onloadeddata","rc","classList","remove","scrollIntoView","behavior","block","play","getTracks","forEach","track","stop","async","navigator","mediaDevices","getDisplayMedia","video","getUserMedia","echoCancellation","noiseSuppression","sampleRate","err","setupStream","MediaStream","MediaRecorder","ondataavailable","onstop","start","warn","id","viewBox","r","cx","cy","Container","container","camera","scene","controller","raycaster","mouse","silhouetteMesh","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","render","timestamp","frame","textureLoader","silhouette","light","set","add","antialias","alpha","setPixelRatio","devicePixelRatio","enabled","appendChild","domElement","planeMesh","side","transparent","depthWrite","opacity","name","rotation","PI","body","sessionInit","button","createElement","showARNotSupported","style","display","cursor","onmouseenter","onmouseleave","onclick","textContent","stylizeElement","element","bottom","width","height","zIndex","background","backgroundImage","backgroundSize","isSessionSupported","then","supported","startVideoButton","videoMesh","domOverlay","overlay","svg","createElementNS","setAttribute","left","top","currentSession","end","path","optionalFeatures","root","onSessionStarted","session","onSessionEnded","setReferenceSpaceType","setSession","threeScene","children","child","removeEventListener","visible","paused","pause","requestSession","showStartAR","catch","message","isSecureContext","href","location","replace","innerHTML","textDecoration","createButton","requiredFeatures","silhouetteGeometry","silhouetteMaterial","map","vertexShader","join","fragmentShader","videoGeometry","videoTexture","minFilter","videoMaterial","uniforms","color","value","myTexture","testController","replaceButton","event","clientX","clientY","touches","setFromCamera","intPoint","intersectObjects","int","object","point","handleStartVideo","init","setAnimationLoop","playsinline","preload","response-type","require","rootElement","ReactDOM"],"mappings":"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","file":"static/js/main.6787af89.chunk.js","sourcesContent":["import * as THREE from 'three';\n\nclass ControllerGestures extends THREE.EventDispatcher{\n    constructor( renderer ){\n        super();\n        \n        if (renderer === undefined){\n            console.error('ControllerGestures must be passed a renderer');\n            return;\n        }\n        \n        const clock = new THREE.Clock();\n        \n        this.controller1 = renderer.xr.getController(0);\n        this.controller1.userData.gestures = { index: 0 };\n        this.controller1.userData.selectPressed = false;\n        this.controller1.addEventListener( 'selectstart', onSelectStart );\n        this.controller1.addEventListener( 'selectend', onSelectEnd );\n        \n        this.controller2 = renderer.xr.getController(1);\n        this.controller2.userData.gestures = { index: 1 };\n        this.controller2.userData.selectPressed = false;\n        this.controller2.addEventListener( 'selectstart', onSelectStart );\n        this.controller2.addEventListener( 'selectend', onSelectEnd );\n        \n        this.doubleClickLimit = 0.2;\n        this.pressMinimum = 0.4;\n        this.right = new THREE.Vector3(1,0,0);\n        this.up = new THREE.Vector3(0,1,0);\n        \n        this.type = 'unknown';\n        this.touchCount = 0;\n        \n        this.clock = clock;\n        \n        const self = this;\n        \n        function onSelectStart( ){\n            const data = this.userData.gestures;\n            \n            data.startPosition = undefined;\n            data.startTime = clock.getElapsedTime();\n            \n            if ( self.type.indexOf('tap') == -1) data.taps = 0;\n            \n            self.type = 'unknown';\n            this.userData.selectPressed = true;\n            \n            self.touchCount++;\n            \n            console.log( `onSelectStart touchCount: ${ self.touchCount }` );\n        }\n        \n        function onSelectEnd( ){\n            const data = this.userData.gestures;\n            \n            data.endTime = clock.getElapsedTime();\n            const startToEnd = data.endTime - data.startTime;\n            \n            //console.log(`ControllerGestures.onSelectEnd: startToEnd:${startToEnd.toFixed(2)} taps:${data.taps}`);\n            \n            if (self.type === 'swipe'){\n                const direction = ( self.controller1.position.y < data.startPosition.y) ? \"DOWN\" : \"UP\";\n                self.dispatchEvent( { type:'swipe', direction } );\n                self.type = 'unknown';\n            }else if (self.type !== \"pinch\" && self.type !== \"rotate\" && self.type !== 'pan'){\n                if ( startToEnd < self.doubleClickLimit ){\n                    self.type = \"tap\";\n                    data.taps++;\n                }else if ( startToEnd > self.pressMinimum ){\n                    self.dispatchEvent( { type: 'press', position: self.controller1.position, matrixWorld: self.controller1.matrixWorld }   );\n                    self.type = 'unknown';\n                }\n            }else{\n                self.type = 'unknown';\n            }\n            \n            this.userData.selectPressed = false;\n            data.startPosition = undefined;\n            \n            self.touchCount--;\n        }\n    }\n    \n    get multiTouch(){\n        let result;\n        if ( this.controller1 === undefined || this.controller2 === undefined ){   \n            result = false;\n        }else{\n            result = this.controller1.userData.selectPressed && this.controller2.userData.selectPressed;\n        }\n        const self = this;\n        console.log( `ControllerGestures multiTouch: ${result} touchCount:${self.touchCount}`);\n        return result;\n    }\n    \n    get touch(){\n        let result;\n        if ( this.controller1 === undefined || this.controller2 === undefined ){   \n            result = false;\n        }else{\n            result = this.controller1.userData.selectPressed || this.controller2.userData.selectPressed;\n        }\n        //console.log( `ControllerGestures touch: ${result}`);\n        return result;\n    }\n    \n    get debugMsg(){\n        return this.type;\n    }\n    \n    update(){\n        const data1 = this.controller1.userData.gestures;\n        const data2 = this.controller2.userData.gestures;\n        const currentTime = this.clock.getElapsedTime();\n        \n        let elapsedTime;\n        \n        if (this.controller1.userData.selectPressed && data1.startPosition === undefined){\n            elapsedTime = currentTime - data1.startTime;\n            if (elapsedTime > 0.05 ) data1.startPosition = this.controller1.position.clone();\n        }\n        \n        if (this.controller2.userData.selectPressed && data2.startPosition === undefined){\n            elapsedTime = currentTime - data2.startTime;\n            if (elapsedTime > 0.05 ) data2.startPosition = this.controller2.position.clone();\n        }\n        \n        if (!this.controller1.userData.selectPressed && this.type === 'tap' ){\n            //Only dispatch event after double click limit is passed\n            elapsedTime = this.clock.getElapsedTime() - data1.endTime;\n            if (elapsedTime > this.doubleClickLimit){\n                //console.log( `ControllerGestures.update dispatchEvent taps:${data1.taps}` );\n                switch( data1.taps ){\n                    case 1:\n                        this.dispatchEvent( { type: 'tap', position: this.controller1.position, matrixWorld: this.controller1.matrixWorld } );\n                        break;\n                    case 2:\n                        this.dispatchEvent( { type: 'doubletap', position: this.controller1.position, matrixWorld: this.controller1.matrixWorld } );\n                        break;\n                    case 3:\n                        this.dispatchEvent( { type: 'tripletap', position: this.controller1.position, matrixWorld: this.controller1.matrixWorld } );\n                        break;\n                    case 4:\n                        this.dispatchEvent( { type: 'quadtap', position: this.controller1.position, matrixWorld: this.controller1.matrixWorld }  );\n                        break;\n                }\n                this.type = \"unknown\";\n                data1.taps = 0;\n            }\n        }\n        \n        if (this.type === 'unknown' && this.touch){\n            if (data1.startPosition !== undefined){\n                if (this.multiTouch){\n                    if (data2.startPosition !== undefined){\n                        //startPosition is undefined for 1/20 sec\n                        //test for pinch or rotate\n                        const startDistance = data1.startPosition.distanceTo( data2.startPosition );\n                        const currentDistance = this.controller1.position.distanceTo( this.controller2.position );\n                        const delta = currentDistance - startDistance;\n                        if ( Math.abs(delta) > 0.01 ){\n                            this.type = 'pinch';\n                            this.startDistance = this.controller1.position.distanceTo( this.controller2.position );\n                            this.dispatchEvent( { type: 'pinch', delta: 0, scale: 1, initialise: true } );\n                        }else{\n                            const v1 = data2.startPosition.clone().sub( data1.startPosition ).normalize();\n                            const v2 = this.controller2.position.clone().sub( this.controller1.position ).normalize();\n                            const theta = v1.angleTo( v2 );\n                            if (Math.abs(theta) > 0.2){\n                                this.type = 'rotate';\n                                this.startVector = v2.clone();\n                                this.dispatchEvent( { type: 'rotate', theta: 0, initialise: true } );\n                            }\n                        }\n                    }\n                }else{\n                    //test for swipe or pan\n                    let dist = data1.startPosition.distanceTo( this.controller1.position );\n                    elapsedTime = this.clock.getElapsedTime() - data1.startTime;\n                    const velocity = dist/elapsedTime;\n                    //console.log(`dist:${dist.toFixed(3)} velocity:${velocity.toFixed(3)}`);\n                    if ( dist > 0.01 && velocity > 0.1 ){\n                        const v = this.controller1.position.clone().sub( data1.startPosition );\n                        let maxY = (Math.abs(v.y) > Math.abs(v.x)) && (Math.abs(v.y) > Math.abs(v.z));\n                        if ( maxY )this.type = \"swipe\";\n                    }else if (dist > 0.006 && velocity < 0.03){\n                        this.type = \"pan\";\n                        this.startPosition = this.controller1.position.clone();\n                        this.dispatchEvent( { type: 'pan', delta: new THREE.Vector3(), initialise: true } );\n                    }\n                }\n            }\n        }else if (this.type === 'pinch'){\n            const currentDistance = this.controller1.position.distanceTo( this.controller2.position );\n            const delta = currentDistance - this.startDistance;\n            const scale = currentDistance/this.startDistance;\n            this.dispatchEvent( { type: 'pinch', delta, scale });\n        }else if (this.type === 'rotate'){\n            const v = this.controller2.position.clone().sub( this.controller1.position ).normalize();\n            let theta = this.startVector.angleTo( v );\n            const cross = this.startVector.clone().cross( v );\n            if (this.up.dot(cross) > 0) theta = -theta;\n            this.dispatchEvent( { type: 'rotate', theta } );\n        }else if (this.type === 'pan'){\n            const delta = this.controller1.position.clone().sub( this.startPosition );\n            this.dispatchEvent( { type: 'pan', delta } );\n        }\n    }\n}\n\nexport { ControllerGestures };","import React from 'react'\n\nexport default function StartView({onStartClick}) {\n  \n  return (\n    <>\n      <div className='start_view'>\n        <img className=\"start_view_heart\" src='./images/white_heart.png' alt='logo' />\n      </div>\n    </>\n  )\n}","import React from \"react\"\n\nexport default function ReplaceButton() {\n    return (\n      <div className=\"replace_button\">\n        <img src='./images/replace.png' alt='reset' /> \n      </div>\n    )\n}","import React, { useEffect } from \"react\"\n\nexport default function RecordButton() {\n\n  useEffect(() => {\n    const video = document.getElementById( 'greenscreenvideo' );\n\t\tconst startVideoButton = document.querySelector('.start_video')\n\t\tconst recordButton = document.querySelector('#recorder')\n    let stream, recorder, mixedStream, audio, recordedVideo;\n    let chunks = [];\n\n  async function setupStream () {\n    try {\n      stream = await navigator.mediaDevices.getDisplayMedia({\n        video: true\n      });\n  \n      audio = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          sampleRate: 44100,\n        },\n      });\n  \n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  async function startRecording () {\n    await setupStream();\n  \n    if (stream && audio) {\n      mixedStream = new MediaStream([...stream.getTracks(), ...audio.getTracks()]);\n      recorder = new MediaRecorder(mixedStream);\n      recorder.ondataavailable = handleDataAvailable;\n      recorder.onstop = handleStop;\n      recorder.start(1000);\n    \n      // startButton.disabled = true;\n      // stopButton.disabled = false;\n    \n      console.log('Recording started');\n    } else {\n      console.warn('No stream available.');\n    }\n  }\n\n  function stopRecording () {\n    recorder.stop();\n  \n    // startButton.disabled = false;\n    // stopButton.disabled = true;\n  }\n  \n  function handleDataAvailable (e) {\n    chunks.push(e.data);\n  }\n\n  function handleStop (e) {\n    const blob = new Blob(chunks, { 'type' : 'video/mp4' });\n    chunks = [];\n  \n    // downloadButton.href = URL.createObjectURL(blob);\n    // downloadButton.download = 'video.mp4';\n    // downloadButton.disabled = false;\n  \n    recordedVideo.src = URL.createObjectURL(blob);\n    recordedVideo.load();\n    recordedVideo.onloadeddata = function() {\n      const rc = document.querySelector(\".recorded-video-wrap\");\n      rc.classList.remove(\"hidden\");\n      rc.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n  \n      recordedVideo.play();\n    }\n  \n    stream.getTracks().forEach((track) => track.stop());\n    audio.getTracks().forEach((track) => track.stop());\n  \n    console.log('Recording stopped');\n  }\n  recordButton.addEventListener('click', startRecording);\n\n\n}, [])\n\n    return (\n        <>\n            <div id=\"recorder\" className=\"recorder-container fade-container\">\n                <svg viewBox=\"0 0 38 38\" className=\"progress-container\">\n                  <circle className=\"progress-track\" r=\"16\" cx=\"19\" cy=\"19\"></circle>\n                  <circle id=\"progressBar\" className=\"progress-bar\" r=\"16\" cx=\"19\" cy=\"19\"></circle>\n                  <circle className=\"loading-circle\" r=\"16\" cx=\"19\" cy=\"19\"></circle>\n                </svg>\n\n                <button id=\"recorder-button\" className=\"style-reset\">\n                  Record\n                </button>\n              </div>\n\n            <div id=\"flashElement\" className=\"flash-element\"></div>\n        </>\n    )\n}","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from           'three';\nimport { ARButton } from         './libs/ARButton.js';\nimport { ControllerGestures } from './libs/ControllerGestures'\nimport StartView from \"./components/StartView\";\nimport ReplaceButton from \"./components/ReplaceButton\";\nimport RecordButton from \"./components/RecordButton\";\nrequire('./styles/custom.scss')\n\nfunction Container() {\n\n    // Three.js functionality is all inside useEffect on comp mount\n    useEffect(() => {\n        // define variables\n        let container;\n        let camera, scene, renderer;\n        let controller;\n        let raycaster;\n        let mouse;\n        let silhouetteMesh;\n\n\n        init();\n        animate();\n\n        function init() {\n            // get container for the canvas\n            container = document.querySelector( '.scene' );\n\n            // set Scene\n            scene = new THREE.Scene();\n\n            // load Textures\n            const textureLoader = new THREE.TextureLoader()\n            const silhouette = textureLoader.load('./textures/silhouette.png')\n            const matchTexture = textureLoader.load('./textures/video_match.png')\n\n            // set Camera\n            camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 20 );\n\n            // set Light and add to the Scene\n            const light = new THREE.HemisphereLight( 0xffffff, 0xbbbbff, 1 );\n            light.position.set( 0.5, 1, 0.25 );\n            scene.add( light );\n\n            // set renderer \n            renderer = new THREE.WebGLRenderer( { antialias: true, alpha: true } );\n            renderer.setPixelRatio( window.devicePixelRatio );\n            renderer.setSize( window.innerWidth, window.innerHeight );\n            // enable XR and use container\n            renderer.xr.enabled = true;\n            container.appendChild( renderer.domElement );\n\n            // Ground planeMesh\n            const planeMesh = new THREE.Mesh( new THREE.PlaneBufferGeometry(1000, 1000, 1, 1), new THREE.MeshStandardMaterial({\n                side: THREE.DoubleSide,\n                transparent: true,\n                depthWrite: false,\n                opacity: 0,\n            }))\n            planeMesh.name = 'ground'\n            planeMesh.rotation.x = Math.PI / 2\n            planeMesh.position.set(0, -0.5, 0)\n            scene.add(planeMesh)\n\n            // add AR button and require hit-test\n            document.body.appendChild( ARButton.createButton( renderer, { requiredFeatures: [ 'hit-test' ] } ) );\n\n            // Silhouette plane\n            const silhouetteGeometry = new THREE.PlaneBufferGeometry(1.4, 4, 1)\n            const silhouetteMaterial = new THREE.MeshStandardMaterial( {\n                transparent: true,\n                side: THREE.DoubleSide,\n                map: silhouette,\n            } );\n            silhouetteMesh = new THREE.Mesh( silhouetteGeometry, silhouetteMaterial );\n            silhouetteMesh.name = 'silhouette'\n            scene.add( silhouetteMesh );\n            silhouetteMesh.visible = false\n\n            // // Silhouette Video match plane\n            // const matchGeometry = new THREE.PlaneBufferGeometry(5, 5.1, 1)\n            // const matchMaterial = new THREE.MeshStandardMaterial( {\n            //     map: matchTexture\n            // })\n            // const matchMesh = new THREE.Mesh(matchGeometry, matchMaterial)\n            // scene.add( matchMesh )\n            // matchMesh.visible = false\n\n            // Video plane\n            const video = document.getElementById( 'greenscreenvideo' );\n            // CHROMAKEY CUT Shader\n            const vertexShader = [\n                'varying vec2 vUv;',\n                'void main(void)',\n                '{',\n                'vUv = uv;',\n                'vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n                'gl_Position = projectionMatrix * mvPosition;',\n                '}'\n              ].join('\\n')\n            \n            const fragmentShader = [\n                'uniform sampler2D myTexture;',\n                'uniform vec3 color;',\n                'varying vec2 vUv;',\n                'void main(void)',\n                '{',\n                'vec3 tColor = texture2D( myTexture, vUv ).rgb;',\n                'float a = (length(tColor - color) - 0.5) * 7.0;',\n                'gl_FragColor = vec4(tColor, a);',\n                '}'\n              ].join('\\n')\n            \n            const color = {default: {x: 0.02, y: 0.933, z: 0.321}, type: 'vec3', is: 'uniform'}\n\n            const videoGeometry = new THREE.PlaneBufferGeometry(5, 5.1, 1)\n            const videoTexture = new THREE.VideoTexture( video );\n            videoTexture.minFilter = THREE.LinearFilter\n            const videoMaterial = new THREE.ShaderMaterial( {\n                uniforms: {\n                  color: {\n                    type: 'c',\n                    value: {x: 0.02, y: 0.933, z: 0.321}\n                  },\n                  myTexture: {\n                    type: 't',\n                    value: videoTexture\n                  }\n                },\n                vertexShader: vertexShader,\n                fragmentShader: fragmentShader,\n                transparent: true\n            } )\n\n            const videoMesh = new THREE.Mesh( videoGeometry, videoMaterial );\n            videoMesh.name = 'video_plane'\n            scene.add( videoMesh );\n            videoMesh.visible = false\n\n            // get gestures for multi-touch events\n            controller = new ControllerGestures(renderer)\n            const testController = renderer.xr.getController( 0 );\n            console.log('testController', testController)\n            // test gestures\n            console.log('controller gestures', controller)\n            //controller.addEventListener('tap', onTouch)\n            controller.addEventListener('tap', (e) => {\n                console.log('tap')\n            })\n            controller.addEventListener('press', (e) => {\n                console.log('press')\n            })\n            controller.addEventListener('pan', (e) => {\n                console.log('pan')\n            })\n            controller.addEventListener('swipe', (e) => {\n                console.log('swipe')\n            })\n            controller.addEventListener('pinch', (e) => {\n                console.log('pinch')\n            })\n            controller.addEventListener('rotate', (e) => {\n                console.log('rotate')\n            })\n\n            // cast a ray\n            raycaster = new THREE.Raycaster()\n            const rayOrigin = camera.position\n\n            mouse = new THREE.Vector2()\n\n            // Get Buttons \n            const startVideoButton = document.querySelector('.start_video')\n            const replaceButton = document.querySelector('.replace_button')\n            const recordButton = document.querySelector('#recorder')\n\n            const onTouch = ( event ) => {\n                // calculate mouse position in normalized device coordinates\n\t            // (-1 to +1) for both components\n                console.log('tap')\n\t            mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n\t            mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n                console.log(mouse.x, mouse.y)\n            }\n\n            document.body.addEventListener('click', onTouch)\n            document.body.addEventListener('touchmove', (e)=> {\n                mouse.x = (e.touches[0].clientX / window.innerWidth ) * 2 - 1;\n                mouse.y = - (e.touches[0].clientY / window.innerHeight ) * 2 + 1;\n\n                raycaster.setFromCamera( mouse, camera )\n                const intersects = raycaster.intersectObjects( scene.children, false );\n                //video.play()\n                // get first intersection point\n                let intPoint\n                // only get the int point with ground\n                intersects.forEach(int => {\n                    // The name was intentionally set above\n                    if (int.object.name === \"ground\") {\n                        intPoint = int.point\n                    }\n                })\n                silhouetteMesh.position.set(intPoint.x, intPoint.y, intPoint.z-3)\n                videoMesh.position.set(intPoint.x, intPoint.y + 0.17, intPoint.z - 3)\n            })\n\n            // Replace\n            const handleReplace = () => {\n                // first if replace is before video start\n                if (silhouetteMesh.visible) {\n\t\t\t\t\tsilhouetteMesh.visible = false\n\t\t\t\t\tstartVideoButton.style.display = 'none'\n\t\t\t\t} else if (!video.paused) {\n                    // stop the video\n                    videoMesh.visible = false\n                    video.pause()\n                    video.currentTime = 0\n                    recordButton.classList.add('fade-container')\n                }\n            }\n\n            // Video start Click\n            const handleStartVideo = () => {\n                videoMesh.visible = true\n                silhouetteMesh.visible = false\n                video.play()\n                startVideoButton.style.display = 'none'\n            }\n\n            replaceButton.addEventListener('click', handleReplace)\n            // show recorder when video is playing\n            video.addEventListener('playing', () => {\n                recordButton.classList.remove('fade-container')\n                recordButton.classList.add('active')\n            })\n\n            // On user select\n            function onSelect(event) {\n                // cast ray from touch coordinate\n                raycaster.setFromCamera( mouse, camera )\n                const intersects = raycaster.intersectObjects( scene.children, false );\n\n                // get first intersection point\n                let intPoint\n                // only get the int point with ground\n                intersects.forEach(int => {\n                    // The name was intentionally set above\n                    if (int.object.name === \"ground\") {\n                        intPoint = int.point\n                    }\n                })\n                // Place silhouette\n                if (!silhouetteMesh.visible && !videoMesh.visible) {\n                    silhouetteMesh.position.set(intPoint.x, intPoint.y, intPoint.z - 3)\n                    videoMesh.position.set(intPoint.x, intPoint.y + 0.17, intPoint.z - 3.1)\n                    silhouetteMesh.visible = true\n                }\n\n                // Start video\n                if (!videoMesh.visible) startVideoButton.style.display = 'inherit'\n                startVideoButton.addEventListener('click', handleStartVideo)\n            }\n\n            // get Controller (touch screen)\n            controller = renderer.xr.getController( 0 );\n            controller.addEventListener( 'select', onSelect );\n            scene.add( controller );\n            \n            // set resize handler\n            window.addEventListener( 'resize', onWindowResize );\n\n            // add scene to Window\n            window.threeScene = scene\n        }\n\n        // resize handler\n        function onWindowResize() {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n\n            renderer.setSize( window.innerWidth, window.innerHeight );\n        }\n\n        // Animations\n        function animate() {\n            renderer.setAnimationLoop( render );\n        }\n\n        // Render function from for frame depending funct\n        function render( timestamp, frame ) {\n            renderer.render( scene, camera );\n        }\n\n    }, [])\n\n\n    return (\n        <>\n            <video id=\"greenscreenvideo\" playsinline preload=\"auto\" src=\"./video/Tina_Trinity_original_big.mp4\" response-type=\"arraybuffer\" style={{opacity: 0}}></video>\n            <StartView />\n            <div className=\"scene\" />\n            <div className=\"overlay\">\n                <ReplaceButton />\n                <RecordButton />\n                <img className='start_video' src='./images/start_video_button.png' alt='start' />\n            </div>\n        </>\n    )\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Container />, rootElement);","class ARButton {\n\n\tstatic createButton( renderer, sessionInit = {} ) {\n\n\t\tconst button = document.createElement( 'button' );\n\n\t\tfunction showStartAR( /*device*/ ) {\n\t\t\tconst video = document.getElementById( 'greenscreenvideo' );\n\t\t\tconst startVideoButton = document.querySelector('.start_video')\n\t\t\tconst recordButton = document.querySelector('#recorder')\n\t\t\tlet videoMesh, silhouetteMesh;\n\n\t\t\tif ( sessionInit.domOverlay === undefined ) {\n\n\t\t\t\tvar overlay = document.querySelector( '.overlay' );\n\t\t\t\toverlay.style.display = 'none';\n\t\t\t\tdocument.body.appendChild( overlay );\n\n\t\t\t\tvar svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\n\t\t\t\tsvg.setAttribute( 'width', 38 );\n\t\t\t\tsvg.setAttribute( 'height', 38 );\n\t\t\t\tsvg.style.position = 'absolute';\n\t\t\t\tsvg.style.left = '20px';\n\t\t\t\tsvg.style.top = '20px';\n\t\t\t\tsvg.addEventListener( 'click', function () {\n\n\t\t\t\t\tcurrentSession.end();\n\n\t\t\t\t} );\n\t\t\t\toverlay.appendChild( svg );\n\n\t\t\t\tvar path = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\n\t\t\t\tpath.setAttribute( 'd', 'M 12,12 L 28,28 M 28,12 12,28' );\n\t\t\t\tpath.setAttribute( 'stroke', '#fff' );\n\t\t\t\tpath.setAttribute( 'stroke-width', 2 );\n\t\t\t\tsvg.appendChild( path );\n\n\t\t\t\tif ( sessionInit.optionalFeatures === undefined ) {\n\n\t\t\t\t\tsessionInit.optionalFeatures = [];\n\n\t\t\t\t}\n\n\t\t\t\tsessionInit.optionalFeatures.push( 'dom-overlay' );\n\t\t\t\tsessionInit.domOverlay = { root: overlay };\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet currentSession = null;\n\n\t\t\tasync function onSessionStarted( session ) {\n\n\t\t\t\tsession.addEventListener( 'end', onSessionEnded );\n\n\t\t\t\trenderer.xr.setReferenceSpaceType( 'local' );\n\n\t\t\t\tawait renderer.xr.setSession( session );\n\n\t\t\t\tbutton.textContent = 'STOP AR';\n\t\t\t\tsessionInit.domOverlay.root.style.display = '';\n\n\t\t\t\tcurrentSession = session;\n\t\t\t\t\n\t\t\t\twindow.threeScene.children.forEach(child => {\n\t\t\t\t\tif (child.name === \"silhouette\") {\n\t\t\t\t\t\tconsole.log('assign silhouette')\n                        silhouetteMesh = child\n                    } else if (child.name === \"video_plane\") {\n\t\t\t\t\t\tconsole.log('assign videoMesh')\n\t\t\t\t\t\tvideoMesh = child\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t}\n\n\t\t\tfunction onSessionEnded( /*event*/ ) {\n\n\t\t\t\tcurrentSession.removeEventListener( 'end', onSessionEnded );\n\n\t\t\t\tbutton.textContent = ''; // button text\n\t\t\t\tsessionInit.domOverlay.root.style.display = 'none';\n\n\t\t\t\tcurrentSession = null;\n\t\t\t\t\n\t\t\t\tif (silhouetteMesh.visible) {\n\t\t\t\t\tsilhouetteMesh.visible = false\n\t\t\t\t\tstartVideoButton.style.display = 'none'\n\t\t\t\t} else if (!video.paused) {\n                    // stop the video\n                    videoMesh.visible = false\n                    video.pause()\n                    video.currentTime = 0\n\t\t\t\t\trecordButton.classList.add('fade-container')\n                }\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'pointer';\n\t\t\t// button.style.left = 'calc(50% - 50px)';\n\t\t\t// button.style.width = '100px';\n\n\t\t\tbutton.textContent = '';\n\n\t\t\tbutton.onmouseenter = function () {\n\n\t\t\t\t//button.style.opacity = '1.0';\n\n\t\t\t};\n\n\t\t\tbutton.onmouseleave = function () {\n\n\t\t\t\t//button.style.opacity = '0.5';\n\n\t\t\t};\n\n\t\t\tbutton.onclick = function () {\n\n\t\t\t\tif ( currentSession === null ) {\n\n\t\t\t\t\tnavigator.xr.requestSession( 'immersive-ar', sessionInit ).then( onSessionStarted );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcurrentSession.end();\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction disableButton() {\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'auto';\n\t\t\t//button.style.left = 'calc(50% - 75px)';\n\t\t\t//button.style.width = '150px';\n\n\t\t\tbutton.onmouseenter = null;\n\t\t\tbutton.onmouseleave = null;\n\n\t\t\tbutton.onclick = null;\n\n\t\t}\n\n\t\tfunction showARNotSupported() {\n\n\t\t\tdisableButton();\n\n\t\t\tbutton.textContent = 'AR NOT SUPPORTED';\n\n\t\t}\n\n\t\tfunction stylizeElement( element ) {\n\t\t\telement.style.position = 'absolute';\n\t\t\telement.style.bottom = '18%';\n\t\t\t// element.style.padding = '12px 6px';\n\t\t\t// element.style.border = '1px solid #fff';\n\t\t\t// element.style.borderRadius = '4px';\n\t\t\t// element.style.background = 'rgba(0,0,0,0.1)';\n\t\t\t// element.style.color = '#fff';\n\t\t\t// element.style.font = 'normal 13px sans-serif';\n\t\t\t// element.style.textAlign = 'center';\n\t\t\t// element.style.opacity = '0.5';\n\t\t\t// element.style.outline = 'none';\n\t\t\telement.style.width = '75%'\n\t\t\telement.style.height = '90px'\n\t\t\telement.style.zIndex = '999';\n\t\t\telement.style.background = 'black';\n        \telement.style.backgroundImage = 'url(\"./images/start_button.png\")'\n\t\t\telement.style.backgroundSize = 'cover'\n\t\t}\n\n\t\tif ( 'xr' in navigator ) {\n\n\t\t\tbutton.id = 'ARButton';\n\t\t\tbutton.style.display = 'none';\n\n\t\t\tstylizeElement( button );\n\n\t\t\tnavigator.xr.isSessionSupported( 'immersive-ar' ).then( function ( supported ) {\n\n\t\t\t\tsupported ? showStartAR() : showARNotSupported();\n\n\t\t\t} ).catch( showARNotSupported );\n\n\t\t\treturn button;\n\n\t\t} else {\n\n\t\t\tconst message = document.createElement( 'a' );\n\n\t\t\tif ( window.isSecureContext === false ) {\n\n\t\t\t\tmessage.href = document.location.href.replace( /^http:/, 'https:' );\n\t\t\t\tmessage.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n\t\t\t} else {\n\n\t\t\t\tmessage.href = 'https://immersiveweb.dev/';\n\t\t\t\tmessage.innerHTML = 'WEBXR NOT AVAILABLE';\n\n\t\t\t}\n\n\t\t\tmessage.style.left = 'calc(50% - 90px)';\n\t\t\tmessage.style.width = '180px';\n\t\t\tmessage.style.textDecoration = 'none';\n\n\t\t\tstylizeElement( message );\n\n\t\t\treturn message;\n\n\t\t}\n\n\t}\n\n}\n\nexport { ARButton };\n"],"sourceRoot":""}