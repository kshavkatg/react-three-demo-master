{"version":3,"sources":["index.js"],"names":["Container","useEffect","container","camera","scene","renderer","controller","reticle","hitTestSource","hitTestSourceRequested","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","render","timestamp","frame","referenceSpace","xr","getReferenceSpace","session","getSession","requestReferenceSpace","then","requestHitTestSource","space","source","addEventListener","hitTestResults","getHitTestResults","length","hit","visible","matrix","fromArray","getPose","transform","document","querySelector","THREE","light","position","set","add","antialias","alpha","setPixelRatio","devicePixelRatio","enabled","appendChild","domElement","planeMesh","side","rotation","x","Math","PI","body","ARButton","createButton","requiredFeatures","geometry","translate","getController","material","color","random","mesh","applyMatrix4","matrixWorld","quaternion","setFromRotationMatrix","console","log","rotateX","matrixAutoUpdate","init","setAnimationLoop","className","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.304bcd34.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as THREE from           'three';\nimport { RGBELoader } from       'three/examples/jsm/loaders/RGBELoader.js';\nimport { ARButton } from         'three/examples/jsm/webxr/ARButton.js';\nimport { XREstimatedLight } from 'three/examples/jsm/webxr/XREstimatedLight';\n\nfunction Container() {\n\n    // Three.js functionality is all inside useEffect on comp mount\n    useEffect(() => {\n\n        // define variables\n        let container;\n        let camera, scene, renderer;\n        let controller;\n        let reticle;\n\n        // set hit test\n        let hitTestSource = null;\n        let hitTestSourceRequested = false;\n\n        init();\n        animate();\n\n        function init() {\n            // get container for the canvas\n            container = document.querySelector( '.scene' );\n\n            // set Scene\n            scene = new THREE.Scene();\n\n            // set Camera\n            camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 20 );\n\n            // set Light and add to the Scene\n            const light = new THREE.HemisphereLight( 0xffffff, 0xbbbbff, 1 );\n            light.position.set( 0.5, 1, 0.25 );\n            scene.add( light );\n\n            // set renderer \n            renderer = new THREE.WebGLRenderer( { antialias: true, alpha: true } );\n            renderer.setPixelRatio( window.devicePixelRatio );\n            renderer.setSize( window.innerWidth, window.innerHeight );\n            // enable XR and use container\n            renderer.xr.enabled = true;\n            container.appendChild( renderer.domElement );\n\n            // TEST ground planeMesh\n            const planeMesh = new THREE.Mesh( new THREE.PlaneBufferGeometry(1, 1, 1, 1), new THREE.MeshStandardMaterial({\n                side: THREE.DoubleSide,\n            }))\n            planeMesh.rotation.x = Math.PI / 2\n            planeMesh.position.set(0, -1, -2)\n            scene.add(planeMesh)\n\n            // add AR button and require hit-test\n            document.body.appendChild( ARButton.createButton( renderer, { requiredFeatures: [ 'hit-test' ] } ) );\n\n            // cylinder\n            const geometry = new THREE.CylinderGeometry( 0.1, 0.1, 0.2, 32 ).translate( 0, 0.1, 0 );\n\n            // on user select add cylinder to the reticle position\n            function onSelect() {\n                if ( reticle.visible ) {\n                    \n                    const material = new THREE.MeshPhongMaterial( { color: 0xffffff * Math.random() } );\n                    const mesh = new THREE.Mesh( geometry, material );\n                    // mesh.position.setFromMatrixPosition( reticle.matrix );\n                    // mesh.scale.y = Math.random() * 2 + 1;\n\n                    mesh.position.set( 0, 0, - 0.3 ).applyMatrix4( controller.matrixWorld );\n\t\t\t\t\tmesh.quaternion.setFromRotationMatrix( controller.matrixWorld );\n                    scene.add( mesh );\n                    \n                    console.log('reticleMatrix', reticle.matrix)\n                    console.log('mesh.position', mesh.position)\n                }\n            }\n\n            // get Controller (touch screen)\n            controller = renderer.xr.getController( 0 );\n            controller.addEventListener( 'select', onSelect );\n            scene.add( controller );\n\n            // create Reticle\n            reticle = new THREE.Mesh(\n                new THREE.RingGeometry( 0.15, 0.2, 32 ).rotateX( - Math.PI / 2 ),\n                new THREE.MeshBasicMaterial()\n            );\n            reticle.matrixAutoUpdate = false;\n            reticle.visible = false;\n            scene.add( reticle );\n            \n            // set resize handler\n            window.addEventListener( 'resize', onWindowResize );\n        }\n\n        // resize handler\n        function onWindowResize() {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n\n            renderer.setSize( window.innerWidth, window.innerHeight );\n        }\n\n        // Animations\n        function animate() {\n            renderer.setAnimationLoop( render );\n        }\n\n        // Render\n        function render( timestamp, frame ) {\n            if ( frame ) {\n                // get reference space of device\n                const referenceSpace = renderer.xr.getReferenceSpace();\n\n                // get session object\n                const session = renderer.xr.getSession();\n \n                if ( hitTestSourceRequested === false ) {\n                    // get the Viewer ref space\n                    session.requestReferenceSpace( 'viewer' ).then( function ( referenceSpace ) {\n                        // then use it to get hitTestSource\n                        session.requestHitTestSource( { space: referenceSpace } ).then( function ( source ) {\n                            hitTestSource = source;\n                        } );\n\n                    } );\n\n                    // on Session end remove hit test\n                    session.addEventListener( 'end', function () {\n                        hitTestSourceRequested = false;\n                        hitTestSource = null;\n                    } );\n\n                    hitTestSourceRequested = true;\n                }\n\n                if ( hitTestSource ) {\n\n                    // get hit test results\n                    const hitTestResults = frame.getHitTestResults( hitTestSource );\n\n                    if ( hitTestResults.length ) {\n                        // get first result\n                        const hit = hitTestResults[ 0 ];\n                        // show and place reticle\n                        reticle.visible = true;\n                        reticle.matrix.fromArray( hit.getPose( referenceSpace ).transform.matrix );\n\n                    } else {\n                        reticle.visible = false;\n                    }\n\n                }\n\n            }\n\n            renderer.render( scene, camera );\n\n        }\n\n    }, [])\n\n\n\n    return (\n        <>\n            <div className=\"scene\" />\n        </>\n    )\n    \n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Container />, rootElement);"],"sourceRoot":""}